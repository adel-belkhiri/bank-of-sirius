diff --git a/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py b/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py
index f5279673..c8961187 100644
--- a/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py
+++ b/opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py
@@ -18,6 +18,7 @@ import atexit
 import concurrent.futures
 import json
 import logging
+import lttngust
 import threading
 import traceback
 import typing
@@ -61,12 +62,14 @@ from opentelemetry.sdk.util.instrumentation import (
     InstrumentationInfo,
     InstrumentationScope,
 )
+from opentelemetry.semconv.resource import ResourceAttributes
 from opentelemetry.trace import SpanContext
 from opentelemetry.trace.status import Status, StatusCode
 from opentelemetry.util import types
 from opentelemetry.util._time import _time_ns

 logger = logging.getLogger(__name__)
+trace_logger = logging.getLogger('opentelemetry-ust')

 _DEFAULT_OTEL_ATTRIBUTE_COUNT_LIMIT = 128
 _DEFAULT_OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT = 128
@@ -867,6 +870,13 @@ class Span(trace_api.Span, ReadableSpan):
                 start_time if start_time is not None else _time_ns()
             )

+        # LTTng instrumentation
+        trace_logger.info('trace_id:%s, span_id:%s, parent_span_id:%s',
+                        trace_api.format_trace_id(self._context.trace_id),
+                        trace_api.format_span_id(self._context.span_id),
+                        trace_api.format_span_id(0 if self.parent is None else self.parent.span_id),
+                        )
+
         self._span_processor.on_start(self, parent_context=parent_context)

     def end(self, end_time: Optional[int] = None) -> None:
@@ -879,6 +889,14 @@ class Span(trace_api.Span, ReadableSpan):

             self._end_time = end_time if end_time is not None else _time_ns()

+        # LTTng instrumentation
+        trace_logger.info('trace_id:%s, span_id:%s, service_name:%s, op_name:%s, duration:%d',
+                        trace_api.format_trace_id(self._context.trace_id),
+                        trace_api.format_span_id(self._context.span_id),
+                        self.resource.attributes.get(ResourceAttributes.SERVICE_NAME, None),
+                        self.name,
+                        (self._end_time - self._start_time))
+
         self._span_processor.on_end(self._readable_span())

     @_check_span_ended
